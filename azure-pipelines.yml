stages:
  - stage: StageBuild
    jobs:
      - job: Build
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - bash: |
              set -ex
              [ "`jq -r .version vss-extension.json`" == "`jq -r '.version | "\(.Major).\(.Minor).\(.Patch)"' HaxeTool/task.json`" ]
              [ "`jq -r .version vss-extension.json`" == "`jq -r .version HaxeTool/package.json`" ]
              [ "`jq -r .version HaxeTool/package.json`" == "`jq -r .version HaxeTool/package-lock.json`" ]
            displayName: Check version
          - bash: |
              set -ex
              sudo add-apt-repository ppa:haxe/haxe3.4 -y
              sudo apt update -y
              sudo apt install -qqy haxe jq
              sudo npm install -g tfx-cli
            displayName: Install dependencies
          - bash: |
              set -ex
              haxelib setup ~/haxelib
              haxelib install HaxeTool/build.hxml --always
            displayName: Install Haxe libraries
          - bash: make
            displayName: Build
          - publish: output
            artifact: output
  - stage: StagePublish
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'), '$(AZURE_TOKEN)')
    jobs:
      - job: Publish
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - bash: |
              set -ex
              [ "$(Build.SourceBranch)" == "refs/tags/v`jq -r .version vss-extension.json`" ]
            displayName: Check tag name
          - bash: |
              set -ex
              sudo apt update -y
              sudo apt install -qqy jq
              sudo npm install -g tfx-cli
            displayName: Install dependencies
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: output
              path: $(Build.SourcesDirectory)/output
          - bash: make publish
            env:
              AZURE_DEVOPS_EXT_PAT: $(AZURE_DEVOPS_EXT_PAT)
            displayName: Publish extension
          - bash: |
              set -ex
              curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
              az extension add --name azure-devops
              az devops configure --defaults organization=https://dev.azure.com/onthewings
            displayName: Setup Azure CLI
          - bash: |
              set -ex
              INSTALLED_VERSION=`az devops extension show --publisher-name onthewings --extension-name 990B3EB1-135C-4701-AF8A-F235EAFDD9F3 | jq -r .version`
              [ "${INSTALLED_VERSION}" == "`jq -r .version vss-extension.json`" ]
            env:
              AZURE_DEVOPS_EXT_PAT: $(AZURE_DEVOPS_EXT_PAT)
            displayName: Check published version

trigger:
  branches:
    include:
    - '*'
  tags:
    include:
      - v*
